{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\n// This is the root reducer of the feature. It is used for:\n//   1. Load reducers from each action in the feature and process them one by one.\n//      Note that this part of code is mainly maintained by Rekit, you usually don't need to edit them.\n//   2. Write cross-topic reducers. If a reducer is not bound to some specific action.\n//      Then it could be written here.\n// Learn more from the introduction of this approach:\n// https://medium.com/@nate_wang/a-new-approach-for-managing-redux-actions-91c26ce8b5da.\nimport initialState from './initialState';\nimport { reducer as counterPlusOneReducer } from './counterPlusOne';\nimport { reducer as counterMinusOneReducer } from './counterMinusOne';\nimport { reducer as counterResetReducer } from './counterReset';\nimport { reducer as fetchRedditListReducer } from './fetchRedditList';\nvar reducers = [counterPlusOneReducer, counterMinusOneReducer, counterResetReducer, fetchRedditListReducer];\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    // Handle cross-topic actions here\n    default:\n      newState = state;\n      break;\n  }\n\n  return reducers.reduce(function (s, r) {\n    return r(s, action);\n  }, newState);\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(reducers, \"reducers\", \"/home/farrux/java/bot_admin_dashboard/src/features/examples/redux/reducer.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/home/farrux/java/bot_admin_dashboard/src/features/examples/redux/reducer.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/farrux/java/bot_admin_dashboard/src/features/examples/redux/reducer.js"],"names":["initialState","reducer","counterPlusOneReducer","counterMinusOneReducer","counterResetReducer","fetchRedditListReducer","reducers","state","action","newState","type","reduce","s","r"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,OAAO,IAAIC,qBAApB,QAAiD,kBAAjD;AACA,SAASD,OAAO,IAAIE,sBAApB,QAAkD,mBAAlD;AACA,SAASF,OAAO,IAAIG,mBAApB,QAA+C,gBAA/C;AACA,SAASH,OAAO,IAAII,sBAApB,QAAkD,mBAAlD;AAEA,IAAMC,QAAQ,GAAG,CACfJ,qBADe,EAEfC,sBAFe,EAGfC,mBAHe,EAIfC,sBAJe,CAAjB;AAOA,eAAe,SAASJ,OAAT,GAA+C;AAAA,MAA9BM,KAA8B,uEAAtBP,YAAsB;AAAA,MAARQ,MAAQ;AAC5D,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE;AACA;AACED,MAAAA,QAAQ,GAAGF,KAAX;AACA;AAJJ;;AAMA,SAAOD,QAAQ,CAACK,MAAT,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,CAACD,CAAD,EAAIJ,MAAJ,CAAX;AAAA,GAAhB,EAAwCC,QAAxC,CAAP;AACD;;;;;;;;;;0BAhBKH,Q;0BAOkBL,O","sourcesContent":["// This is the root reducer of the feature. It is used for:\n//   1. Load reducers from each action in the feature and process them one by one.\n//      Note that this part of code is mainly maintained by Rekit, you usually don't need to edit them.\n//   2. Write cross-topic reducers. If a reducer is not bound to some specific action.\n//      Then it could be written here.\n// Learn more from the introduction of this approach:\n// https://medium.com/@nate_wang/a-new-approach-for-managing-redux-actions-91c26ce8b5da.\n\nimport initialState from './initialState';\nimport { reducer as counterPlusOneReducer } from './counterPlusOne';\nimport { reducer as counterMinusOneReducer } from './counterMinusOne';\nimport { reducer as counterResetReducer } from './counterReset';\nimport { reducer as fetchRedditListReducer } from './fetchRedditList';\n\nconst reducers = [\n  counterPlusOneReducer,\n  counterMinusOneReducer,\n  counterResetReducer,\n  fetchRedditListReducer,\n];\n\nexport default function reducer(state = initialState, action) {\n  let newState;\n  switch (action.type) {\n    // Handle cross-topic actions here\n    default:\n      newState = state;\n      break;\n  }\n  return reducers.reduce((s, r) => r(s, action), newState);\n}\n"]},"metadata":{},"sourceType":"module"}