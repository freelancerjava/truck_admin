{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { routerMiddleware } from 'connected-react-router';\nimport history from './history';\nimport rootReducer from './rootReducer';\nvar router = routerMiddleware(history); // NOTE: Do not change middleares delaration pattern since rekit plugins may register middlewares to it.\n\nvar middlewares = [thunk, router];\n\nvar devToolsExtension = function devToolsExtension(f) {\n  return f;\n};\n/* istanbul ignore if  */\n\n\nif (process.env.NODE_ENV === 'development') {\n  var _require = require('redux-logger'),\n      createLogger = _require.createLogger;\n\n  var logger = createLogger({\n    collapsed: true\n  });\n  middlewares.push(logger);\n\n  if (window.__REDUX_DEVTOOLS_EXTENSION__) {\n    devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__();\n  }\n}\n\nfunction configureStore(initialState) {\n  var store = createStore(rootReducer, initialState, compose(applyMiddleware.apply(void 0, middlewares), devToolsExtension));\n  /* istanbul ignore if  */\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('./rootReducer', function () {\n      var nextRootReducer = require('./rootReducer').default; // eslint-disable-line\n\n\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  return store;\n}\n\nvar _default = configureStore();\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(router, \"router\", \"/home/farrux/java/bot_admin_dashboard/src/common/store.js\");\n  reactHotLoader.register(middlewares, \"middlewares\", \"/home/farrux/java/bot_admin_dashboard/src/common/store.js\");\n  reactHotLoader.register(devToolsExtension, \"devToolsExtension\", \"/home/farrux/java/bot_admin_dashboard/src/common/store.js\");\n  reactHotLoader.register(configureStore, \"configureStore\", \"/home/farrux/java/bot_admin_dashboard/src/common/store.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/farrux/java/bot_admin_dashboard/src/common/store.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/farrux/java/bot_admin_dashboard/src/common/store.js"],"names":["createStore","applyMiddleware","compose","thunk","routerMiddleware","history","rootReducer","router","middlewares","devToolsExtension","f","process","env","NODE_ENV","require","createLogger","logger","collapsed","push","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","initialState","store","module","hot","accept","nextRootReducer","default","replaceReducer"],"mappings":";;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,IAAMC,MAAM,GAAGH,gBAAgB,CAACC,OAAD,CAA/B,C,CAEA;;AACA,IAAMG,WAAW,GAAG,CAACL,KAAD,EAAQI,MAAR,CAApB;;AAEA,IAAIE,iBAAiB,GAAG,2BAAAC,CAAC;AAAA,SAAIA,CAAJ;AAAA,CAAzB;AAEA;;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAAA,iBACjBC,OAAO,CAAC,cAAD,CADU;AAAA,MAClCC,YADkC,YAClCA,YADkC;;AAG1C,MAAMC,MAAM,GAAGD,YAAY,CAAC;AAAEE,IAAAA,SAAS,EAAE;AAAb,GAAD,CAA3B;AACAT,EAAAA,WAAW,CAACU,IAAZ,CAAiBF,MAAjB;;AAEA,MAAIG,MAAM,CAACC,4BAAX,EAAyC;AACvCX,IAAAA,iBAAiB,GAAGU,MAAM,CAACC,4BAAP,EAApB;AACD;AACF;;AAED,SAASC,cAAT,CAAwBC,YAAxB,EAAsC;AACpC,MAAMC,KAAK,GAAGvB,WAAW,CACvBM,WADuB,EAEvBgB,YAFuB,EAGvBpB,OAAO,CACLD,eAAe,MAAf,SAAmBO,WAAnB,CADK,EAELC,iBAFK,CAHgB,CAAzB;AASA;;AACA,MAAIe,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,eAAlB,EAAmC,YAAM;AACvC,UAAMC,eAAe,GAAGb,OAAO,CAAC,eAAD,CAAP,CAAyBc,OAAjD,CADuC,CACmB;;;AAC1DL,MAAAA,KAAK,CAACM,cAAN,CAAqBF,eAArB;AACD,KAHD;AAID;;AACD,SAAOJ,KAAP;AACD;;eAEcF,cAAc,E;;AAA7B;;;;;;;;;;0BAxCMd,M;0BAGAC,W;0BAEFC,iB;0BAcKY,c","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { routerMiddleware } from 'connected-react-router';\nimport history from './history';\nimport rootReducer from './rootReducer';\n\nconst router = routerMiddleware(history);\n\n// NOTE: Do not change middleares delaration pattern since rekit plugins may register middlewares to it.\nconst middlewares = [thunk, router];\n\nlet devToolsExtension = f => f;\n\n/* istanbul ignore if  */\nif (process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger');\n\n  const logger = createLogger({ collapsed: true });\n  middlewares.push(logger);\n\n  if (window.__REDUX_DEVTOOLS_EXTENSION__) {\n    devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__();\n  }\n}\n\nfunction configureStore(initialState) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(...middlewares),\n      devToolsExtension,\n    ),\n  );\n\n  /* istanbul ignore if  */\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('./rootReducer', () => {\n      const nextRootReducer = require('./rootReducer').default; // eslint-disable-line\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n  return store;\n}\n\nexport default configureStore();\n"]},"metadata":{},"sourceType":"module"}