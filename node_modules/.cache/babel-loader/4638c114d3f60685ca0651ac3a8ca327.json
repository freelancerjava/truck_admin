{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { useMountedCallback } from './utils';\nimport { getResolvedMutationConfig } from '../core/config';\nimport { Console, uid, getStatusProps } from '../core/utils';\nimport { QueryStatus } from '../core/types';\nimport { useQueryCache } from './ReactQueryCacheProvider';\nimport { useContextConfig } from './ReactQueryConfigProvider'; // TYPES\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nvar ActionType = {\n  Reset: 0,\n  Loading: 1,\n  Resolve: 2,\n  Reject: 3\n}; // HOOK\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction getDefaultState() {\n  return _extends({}, getStatusProps(QueryStatus.Idle), {\n    data: undefined,\n    error: null\n  });\n}\n\nfunction mutationReducer(state, action) {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState();\n\n    case ActionType.Loading:\n      return _extends({}, getStatusProps(QueryStatus.Loading), {\n        data: undefined,\n        error: null\n      });\n\n    case ActionType.Resolve:\n      return _extends({}, getStatusProps(QueryStatus.Success), {\n        data: action.data,\n        error: null\n      });\n\n    case ActionType.Reject:\n      return _extends({}, getStatusProps(QueryStatus.Error), {\n        data: undefined,\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport function useMutation(mutationFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var cache = useQueryCache();\n  var contextConfig = useContextConfig(); // Get resolved config\n\n  var resolvedConfig = getResolvedMutationConfig(cache, contextConfig, config);\n\n  var _React$useReducer = React.useReducer(mutationReducer, null, getDefaultState),\n      state = _React$useReducer[0],\n      unsafeDispatch = _React$useReducer[1];\n\n  var dispatch = useMountedCallback(unsafeDispatch);\n  var latestMutationRef = React.useRef();\n  var latestMutationFnRef = React.useRef(mutationFn);\n  latestMutationFnRef.current = mutationFn;\n  var latestConfigRef = React.useRef(resolvedConfig);\n  latestConfigRef.current = resolvedConfig;\n  var mutate = React.useCallback(_async(function (variables, mutateConfig) {\n    if (mutateConfig === void 0) {\n      mutateConfig = {};\n    }\n\n    var latestConfig = latestConfigRef.current;\n    var mutationId = uid();\n    latestMutationRef.current = mutationId;\n\n    var isLatest = function isLatest() {\n      return latestMutationRef.current === mutationId;\n    };\n\n    var snapshotValue;\n    return _catch(function () {\n      dispatch({\n        type: ActionType.Loading\n      });\n      return _await(latestConfig.onMutate == null ? void 0 : latestConfig.onMutate(variables), function (_latestConfig$onMutat) {\n        snapshotValue = _latestConfig$onMutat;\n        var latestMutationFn = latestMutationFnRef.current;\n        return _await(latestMutationFn(variables), function (data) {\n          if (isLatest()) {\n            dispatch({\n              type: ActionType.Resolve,\n              data: data\n            });\n          }\n\n          return _await(latestConfig.onSuccess == null ? void 0 : latestConfig.onSuccess(data, variables), function () {\n            return _await(mutateConfig.onSuccess == null ? void 0 : mutateConfig.onSuccess(data, variables), function () {\n              return _await(latestConfig.onSettled == null ? void 0 : latestConfig.onSettled(data, null, variables), function () {\n                return _await(mutateConfig.onSettled == null ? void 0 : mutateConfig.onSettled(data, null, variables), function () {\n                  return data;\n                });\n              });\n            });\n          });\n        });\n      });\n    }, function (error) {\n      Console.error(error);\n      return _await(latestConfig.onError == null ? void 0 : latestConfig.onError(error, variables, snapshotValue), function () {\n        return _await(mutateConfig.onError == null ? void 0 : mutateConfig.onError(error, variables, snapshotValue), function () {\n          return _await(latestConfig.onSettled == null ? void 0 : latestConfig.onSettled(undefined, error, variables, snapshotValue), function () {\n            return _await(mutateConfig.onSettled == null ? void 0 : mutateConfig.onSettled(undefined, error, variables, snapshotValue), function () {\n              if (isLatest()) {\n                dispatch({\n                  type: ActionType.Reject,\n                  error: error\n                });\n              }\n\n              if (mutateConfig.throwOnError || latestConfig.throwOnError) {\n                throw error;\n              }\n            });\n          });\n        });\n      });\n    });\n  }), [dispatch]);\n  React.useEffect(function () {\n    var latestConfig = latestConfigRef.current;\n    var suspense = latestConfig.suspense,\n        useErrorBoundary = latestConfig.useErrorBoundary;\n\n    if ((useErrorBoundary || suspense) && state.error) {\n      throw state.error;\n    }\n  }, [state.error]);\n  var reset = React.useCallback(function () {\n    dispatch({\n      type: ActionType.Reset\n    });\n  }, [dispatch]);\n\n  var result = _extends({}, state, {\n    reset: reset\n  });\n\n  return [mutate, result];\n}","map":null,"metadata":{},"sourceType":"module"}