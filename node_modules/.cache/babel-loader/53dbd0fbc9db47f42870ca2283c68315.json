{"ast":null,"code":"import _objectSpread from \"/home/farrux/java/bot_admin_dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport axios from 'axios';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { EXAMPLES_FETCH_REDDIT_LIST_BEGIN, EXAMPLES_FETCH_REDDIT_LIST_SUCCESS, EXAMPLES_FETCH_REDDIT_LIST_FAILURE, EXAMPLES_FETCH_REDDIT_LIST_DISMISS_ERROR } from './constants'; // Rekit uses redux-thunk for async actions by default: https://github.com/gaearon/redux-thunk\n// If you prefer redux-saga, you can use rekit-plugin-redux-saga: https://github.com/supnate/rekit-plugin-redux-saga\n\nexport function fetchRedditList() {\n  return function (dispatch) {\n    // optionally you can have getState as the second argument\n    dispatch({\n      type: EXAMPLES_FETCH_REDDIT_LIST_BEGIN\n    }); // Return a promise so that you could control UI flow without states in the store.\n    // For example: after submit a form, you need to redirect the page to another when succeeds or show some errors message if fails.\n    // It's hard to use state to manage it, but returning a promise allows you to easily achieve it.\n    // e.g.: handleSubmit() { this.props.actions.submitForm(data).then(()=> {}).catch(() => {}); }\n\n    var promise = new Promise(function (resolve, reject) {\n      // doRequest is a placeholder Promise. You should replace it with your own logic.\n      // See the real-word example at:  https://github.com/supnate/rekit/blob/master/src/features/home/redux/fetchRedditReactjsList.js\n      // args.error here is only for test coverage purpose.\n      var doRequest = axios.get('http://www.reddit.com/r/reactjs.json');\n      doRequest.then(function (res) {\n        dispatch({\n          type: EXAMPLES_FETCH_REDDIT_LIST_SUCCESS,\n          data: res.data\n        });\n        resolve(res);\n      }, // Use rejectHandler as the second argument so that render errors won't be caught.\n      function (err) {\n        dispatch({\n          type: EXAMPLES_FETCH_REDDIT_LIST_FAILURE,\n          data: {\n            error: err\n          }\n        });\n        reject(err);\n      });\n    });\n    return promise;\n  };\n} // Async action saves request error by default, this method is used to dismiss the error info.\n// If you don't want errors to be saved in Redux store, just ignore this method.\n\nexport function dismissFetchRedditListError() {\n  return {\n    type: EXAMPLES_FETCH_REDDIT_LIST_DISMISS_ERROR\n  };\n}\nexport function useFetchRedditList() {\n  // args: false value or array\n  // if array, means args passed to the action creator\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      redditList: state.examples.redditList,\n      fetchRedditListPending: state.examples.fetchRedditListPending,\n      fetchRedditListError: state.examples.fetchRedditListError\n    };\n  }, shallowEqual),\n      redditList = _useSelector.redditList,\n      fetchRedditListPending = _useSelector.fetchRedditListPending,\n      fetchRedditListError = _useSelector.fetchRedditListError;\n\n  var boundAction = useCallback(function () {\n    dispatch(fetchRedditList());\n  }, [dispatch]);\n  var boundDismissFetchRedditListError = useCallback(function () {\n    dispatch(dismissFetchRedditListError());\n  }, [dispatch]);\n  return {\n    redditList: redditList,\n    fetchRedditList: boundAction,\n    fetchRedditListPending: fetchRedditListPending,\n    fetchRedditListError: fetchRedditListError,\n    dismissFetchRedditListError: boundDismissFetchRedditListError\n  };\n}\n\n__signature__(useFetchRedditList, \"useDispatch{dispatch}\\nuseSelector{{ redditList, fetchRedditListPending, fetchRedditListError }}\\nuseCallback{boundAction}\\nuseCallback{boundDismissFetchRedditListError}\", function () {\n  return [useDispatch, useSelector];\n});\n\nexport function reducer(state, action) {\n  switch (action.type) {\n    case EXAMPLES_FETCH_REDDIT_LIST_BEGIN:\n      // Just after a request is sent\n      return _objectSpread({}, state, {\n        fetchRedditListPending: true,\n        fetchRedditListError: null\n      });\n\n    case EXAMPLES_FETCH_REDDIT_LIST_SUCCESS:\n      // The request is success\n      return _objectSpread({}, state, {\n        redditList: action.data.data.children,\n        fetchRedditListPending: false,\n        fetchRedditListError: null\n      });\n\n    case EXAMPLES_FETCH_REDDIT_LIST_FAILURE:\n      // The request is failed\n      return _objectSpread({}, state, {\n        fetchRedditListPending: false,\n        fetchRedditListError: action.data.error\n      });\n\n    case EXAMPLES_FETCH_REDDIT_LIST_DISMISS_ERROR:\n      // Dismiss the request failure error\n      return _objectSpread({}, state, {\n        fetchRedditListError: null\n      });\n\n    default:\n      return state;\n  }\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(fetchRedditList, \"fetchRedditList\", \"/home/farrux/java/bot_admin_dashboard/src/features/examples/redux/fetchRedditList.js\");\n  reactHotLoader.register(dismissFetchRedditListError, \"dismissFetchRedditListError\", \"/home/farrux/java/bot_admin_dashboard/src/features/examples/redux/fetchRedditList.js\");\n  reactHotLoader.register(useFetchRedditList, \"useFetchRedditList\", \"/home/farrux/java/bot_admin_dashboard/src/features/examples/redux/fetchRedditList.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/home/farrux/java/bot_admin_dashboard/src/features/examples/redux/fetchRedditList.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/farrux/java/bot_admin_dashboard/src/features/examples/redux/fetchRedditList.js"],"names":["axios","useCallback","useDispatch","useSelector","shallowEqual","EXAMPLES_FETCH_REDDIT_LIST_BEGIN","EXAMPLES_FETCH_REDDIT_LIST_SUCCESS","EXAMPLES_FETCH_REDDIT_LIST_FAILURE","EXAMPLES_FETCH_REDDIT_LIST_DISMISS_ERROR","fetchRedditList","dispatch","type","promise","Promise","resolve","reject","doRequest","get","then","res","data","err","error","dismissFetchRedditListError","useFetchRedditList","state","redditList","examples","fetchRedditListPending","fetchRedditListError","boundAction","boundDismissFetchRedditListError","reducer","action","children"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport {\n  EXAMPLES_FETCH_REDDIT_LIST_BEGIN,\n  EXAMPLES_FETCH_REDDIT_LIST_SUCCESS,\n  EXAMPLES_FETCH_REDDIT_LIST_FAILURE,\n  EXAMPLES_FETCH_REDDIT_LIST_DISMISS_ERROR,\n} from './constants';\n\n// Rekit uses redux-thunk for async actions by default: https://github.com/gaearon/redux-thunk\n// If you prefer redux-saga, you can use rekit-plugin-redux-saga: https://github.com/supnate/rekit-plugin-redux-saga\nexport function fetchRedditList() {\n  return dispatch => {\n    // optionally you can have getState as the second argument\n    dispatch({\n      type: EXAMPLES_FETCH_REDDIT_LIST_BEGIN,\n    });\n\n    // Return a promise so that you could control UI flow without states in the store.\n    // For example: after submit a form, you need to redirect the page to another when succeeds or show some errors message if fails.\n    // It's hard to use state to manage it, but returning a promise allows you to easily achieve it.\n    // e.g.: handleSubmit() { this.props.actions.submitForm(data).then(()=> {}).catch(() => {}); }\n    const promise = new Promise((resolve, reject) => {\n      // doRequest is a placeholder Promise. You should replace it with your own logic.\n      // See the real-word example at:  https://github.com/supnate/rekit/blob/master/src/features/home/redux/fetchRedditReactjsList.js\n      // args.error here is only for test coverage purpose.\n      const doRequest = axios.get('http://www.reddit.com/r/reactjs.json');\n\n      doRequest.then(\n        res => {\n          dispatch({\n            type: EXAMPLES_FETCH_REDDIT_LIST_SUCCESS,\n            data: res.data,\n          });\n          resolve(res);\n        },\n        // Use rejectHandler as the second argument so that render errors won't be caught.\n        err => {\n          dispatch({\n            type: EXAMPLES_FETCH_REDDIT_LIST_FAILURE,\n            data: { error: err },\n          });\n          reject(err);\n        },\n      );\n    });\n\n    return promise;\n  };\n}\n\n// Async action saves request error by default, this method is used to dismiss the error info.\n// If you don't want errors to be saved in Redux store, just ignore this method.\nexport function dismissFetchRedditListError() {\n  return {\n    type: EXAMPLES_FETCH_REDDIT_LIST_DISMISS_ERROR,\n  };\n}\n\nexport function useFetchRedditList() {\n  // args: false value or array\n  // if array, means args passed to the action creator\n  const dispatch = useDispatch();\n\n  const { redditList, fetchRedditListPending, fetchRedditListError } = useSelector(\n    state => ({\n      redditList: state.examples.redditList,\n      fetchRedditListPending: state.examples.fetchRedditListPending,\n      fetchRedditListError: state.examples.fetchRedditListError,\n    }),\n    shallowEqual,\n  );\n\n  const boundAction = useCallback(\n    () => {\n      dispatch(fetchRedditList());\n    },\n    [dispatch],\n  );\n\n  const boundDismissFetchRedditListError = useCallback(() => {\n    dispatch(dismissFetchRedditListError());\n  }, [dispatch]);\n\n  return {\n    redditList,\n    fetchRedditList: boundAction,\n    fetchRedditListPending,\n    fetchRedditListError,\n    dismissFetchRedditListError: boundDismissFetchRedditListError,\n  };\n}\n\nexport function reducer(state, action) {\n  switch (action.type) {\n    case EXAMPLES_FETCH_REDDIT_LIST_BEGIN:\n      // Just after a request is sent\n      return {\n        ...state,\n        fetchRedditListPending: true,\n        fetchRedditListError: null,\n      };\n\n    case EXAMPLES_FETCH_REDDIT_LIST_SUCCESS:\n      // The request is success\n      return {\n        ...state,\n        redditList: action.data.data.children,\n\n        fetchRedditListPending: false,\n        fetchRedditListError: null,\n      };\n\n    case EXAMPLES_FETCH_REDDIT_LIST_FAILURE:\n      // The request is failed\n      return {\n        ...state,\n        fetchRedditListPending: false,\n        fetchRedditListError: action.data.error,\n      };\n\n    case EXAMPLES_FETCH_REDDIT_LIST_DISMISS_ERROR:\n      // Dismiss the request failure error\n      return {\n        ...state,\n        fetchRedditListError: null,\n      };\n\n    default:\n      return state;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}