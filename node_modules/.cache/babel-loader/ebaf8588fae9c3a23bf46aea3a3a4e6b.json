{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n// TYPES\n// Implementation\n\nexport function usePaginatedQuery(arg1, arg2, arg3) {\n  var _getQueryArgs = getQueryArgs(arg1, arg2, arg3),\n      queryKey = _getQueryArgs[0],\n      config = _getQueryArgs[1];\n\n  var result = useBaseQuery(queryKey, _extends({\n    keepPreviousData: true\n  }, config));\n  return _extends({}, result, {\n    resolvedData: result.data,\n    latestData: result.isPreviousData ? undefined : result.data\n  });\n}","map":null,"metadata":{},"sourceType":"module"}